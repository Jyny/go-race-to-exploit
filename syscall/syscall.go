package main

import (
	"reflect"
	"syscall"
	"unsafe"
)

func main() {
	// prepare binPath, argv, env for execve
	prepare_execve_args()

	addrOfFunc := syscall.Syscall
	funcPtr := (*func(trap, a1, a2, a3 uintptr) int)(
		unsafe.Pointer(
			&addrOfFunc,
		),
	)

	// call syscall_Syscall with __NR_execve as syscall
	// and args to execute `xcalc`
	// #include <unistd.h>
	// int execve(const char *pathname, char *const _Nullable argv[], char *const _Nullable envp[]);
	(*funcPtr)(
		syscall.SYS_EXECVE,
		address(binPath),
		address(argv),
		address(env),
	)
}

// strings for execve
var targetPath = "/usr/bin/echo"
var targetArg1 = "now you know syscall"
var targetEnv = ""
var binPath []uint8
var argv []uintptr
var env []uintptr

func prepare_execve_args() {
	binPath = make([]uint8, len(targetPath)+1)
	copy(binPath, targetPath)

	argv = make([]uintptr, 3)
	argv[0] = address(binPath)
	argv1 := make([]uint8, len(targetArg1)+1)
	copy(argv1, targetArg1)
	argv[1] = address(argv1)

	env0 := make([]uint8, len(targetEnv)+1)
	copy(env0, targetEnv)
	env = make([]uintptr, 2)
	env[0] = address(env0)
}

func address(i interface{}) uintptr {
	return reflect.ValueOf(i).Pointer()
}
