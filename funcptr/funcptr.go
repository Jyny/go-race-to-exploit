package main

type itf interface {
	X()
}

type safe struct {
	f *int
}

func (s *safe) X() {
}

type unsafe struct {
	f func()
}

func (u *unsafe) X() {
	if u.f != nil {
		u.f()
	}
}

// interfaces for race
var good itf
var leak itf
var confused itf

func main() {
	addrOfFunc := 0x1337

	good = &safe{f: &addrOfFunc}
	leak = &unsafe{}
	confused = good

	go func() {
		//start the race
		for i := 0; i <= 100000; i++ {
			confused = leak
			confused = good
		}
	}()

	for {
		confused.X()
	}
}
